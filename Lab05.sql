DROP TABLE ORDER_ITEM;
DROP TABLE CUSTOMER_ORDER;
DROP TABLE CUSTOMER;
DROP TABLE DISH;
DROP TABLE CHEF;
DROP TABLE RESTAURANT;

CREATE TABLE RESTAURANT(
    RESTAURANT_ID INTEGER,
    NAME VARCHAR2(100),
    LOCATION VARCHAR2(100),
    CONSTRAINT pk_restaurant PRIMARY KEY(RESTAURANT_ID)
);

CREATE TABLE CHEF(
    CHEF_ID INTEGER,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    SPECIALTY VARCHAR2(100),
    RESTAURANT_ID INTEGER,
    CONSTRAINT pk_chef PRIMARY KEY(CHEF_ID),
    CONSTRAINT fk_chef_restaurant FOREIGN KEY(RESTAURANT_ID) REFERENCES RESTAURANT(RESTAURANT_ID)
);

CREATE TABLE DISH(
    DISH_ID INTEGER,
    NAME VARCHAR2(100),
    PRICE FLOAT,
    CHEF_ID INTEGER,
    CONSTRAINT pk_dish PRIMARY KEY(DISH_ID),
    CONSTRAINT fk_dish_chef FOREIGN KEY(CHEF_ID) REFERENCES CHEF(CHEF_ID)
);

CREATE TABLE CUSTOMER(
    CUSTOMER_ID INTEGER,
    FIRST_NAME VARCHAR2(50),
    LAST_NAME VARCHAR2(50),
    GENDER VARCHAR2(10),
    CONSTRAINT pk_customer PRIMARY KEY(CUSTOMER_ID)
);

CREATE TABLE CUSTOMER_ORDER(
    ORDER_ID INTEGER,
    CUSTOMER_ID INTEGER,
    ORDER_DATE DATE,
    CONSTRAINT pk_order PRIMARY KEY(ORDER_ID),
    CONSTRAINT fk_order_customer FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

CREATE TABLE ORDER_ITEM(
    ORDER_ID INTEGER,
    DISH_ID INTEGER,
    QUANTITY INTEGER,
    CONSTRAINT pk_order_item PRIMARY KEY(ORDER_ID, DISH_ID),
    CONSTRAINT fk_order_item_order FOREIGN KEY(ORDER_ID) REFERENCES CUSTOMER_ORDER(ORDER_ID),
    CONSTRAINT fk_order_item_dish FOREIGN KEY(DISH_ID) REFERENCES DISH(DISH_ID)
);

INSERT INTO RESTAURANT VALUES(1, 'The Gourmet Kitchen', 'Downtown');
INSERT INTO RESTAURANT VALUES(2, 'Seafood Delight', 'Harbor');
INSERT INTO RESTAURANT VALUES(3, 'Vegetarian Paradise', 'Uptown');

INSERT INTO CHEF VALUES(1, 'Gordon', 'Ramsay', 'Italian Cuisine', 1);
INSERT INTO CHEF VALUES(2, 'Jamie', 'Oliver', 'British Cuisine', 1);
INSERT INTO CHEF VALUES(3, 'Nigella', 'Lawson', 'Desserts', 1);
INSERT INTO CHEF VALUES(4, 'Thomas', 'Keller', 'Seafood', 2);
INSERT INTO CHEF VALUES(5, 'Alice', 'Waters', 'Vegetarian', 3);
INSERT INTO CHEF VALUES(6, 'Gordon', 'Smith', 'Fusion Cuisine', 2);

INSERT INTO DISH VALUES(1, 'Spaghetti Carbonara', 15.99, 1);
INSERT INTO DISH VALUES(2, 'Beef Wellington', 25.99, 2);
INSERT INTO DISH VALUES(3, 'Chocolate Cake', 7.99, 3);
INSERT INTO DISH VALUES(4, 'Grilled Salmon', 19.99, 4);
INSERT INTO DISH VALUES(5, 'Lobster Bisque', 17.99, 4);
INSERT INTO DISH VALUES(6, 'Vegetable Stir Fry', 12.99, 5);
INSERT INTO DISH VALUES(7, 'Quinoa Salad', 10.99, 5);
INSERT INTO DISH VALUES(8, 'Mushroom Risotto', 13.99, 1);

INSERT INTO CUSTOMER VALUES(1, 'John', 'Doe', 'Male');
INSERT INTO CUSTOMER VALUES(2, 'Jane', 'Smith', 'Female');
INSERT INTO CUSTOMER VALUES(3, 'Emily', 'Jones', 'Female');
INSERT INTO CUSTOMER VALUES(4, 'Michael', 'Brown', 'Male');
INSERT INTO CUSTOMER VALUES(5, 'Sarah', 'Davis', 'Female');

INSERT INTO CUSTOMER_ORDER VALUES(1, 1, TO_DATE('2021-08-01', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER_ORDER VALUES(2, 2, TO_DATE('2021-08-02', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER_ORDER VALUES(3, 3, TO_DATE('2021-08-03', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER_ORDER VALUES(4, 1, TO_DATE('2021-08-04', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER_ORDER VALUES(5, 4, TO_DATE('2021-08-05', 'YYYY-MM-DD'));
INSERT INTO CUSTOMER_ORDER VALUES(6, 2, TO_DATE('2021-08-06', 'YYYY-MM-DD'));

INSERT INTO ORDER_ITEM VALUES(1, 1, 2);
INSERT INTO ORDER_ITEM VALUES(1, 3, 1);
INSERT INTO ORDER_ITEM VALUES(3, 6, 2);
INSERT INTO ORDER_ITEM VALUES(4, 5, 1);
INSERT INTO ORDER_ITEM VALUES(4, 3, 2);
INSERT INTO ORDER_ITEM VALUES(5, 4, 1);
INSERT INTO ORDER_ITEM VALUES(5, 7, 1);
INSERT INTO ORDER_ITEM VALUES(6, 3, 1);

SELECT FIRST_NAME, COUNT(*)
FROM CHEF
GROUP BY FIRST_NAME
HAVING COUNT(*) > 1;

SELECT D.NAME
FROM DISH D
LEFT JOIN ORDER_ITEM OI ON D.DISH_ID = OI.DISH_ID
WHERE OI.DISH_ID IS NULL;

SELECT C.FIRST_NAME || ' ' || C.LAST_NAME AS FULL_NAME, COUNT(D.DISH_ID) AS DISH_COUNT
FROM CHEF C
LEFT JOIN DISH D ON C.CHEF_ID = D.CHEF_ID
GROUP BY C.FIRST_NAME, C.LAST_NAME
ORDER BY DISH_COUNT DESC;

SELECT MAX(CO.ORDER_DATE) - MIN(CO.ORDER_DATE) AS DAY_DIFFERENCE
FROM CUSTOMER_ORDER CO;

SELECT * FROM (SELECT C.FIRST_NAME || ' ' || C.LAST_NAME AS FULL_NAME, AVG(D.PRICE) AS AVERAGE_PRICE
FROM CHEF C 
JOIN DISH D ON C.CHEF_ID = D.CHEF_ID
GROUP BY C.FIRST_NAME, C.LAST_NAME
ORDER BY AVERAGE_PRICE DESC)
WHERE ROWNUM = 1;

SELECT D.NAME, COUNT(OI.ORDER_ID) AS ORDER_COUNT
FROM DISH D 
LEFT JOIN ORDER_ITEM OI ON D.DISH_ID = OI.DISH_ID
GROUP BY D.NAME
ORDER BY ORDER_COUNT DESC;

SELECT * FROM (SELECT D.NAME, COUNT(OI.ORDER_ID) AS ORDER_COUNT
FROM DISH D 
LEFT JOIN ORDER_ITEM OI ON D.DISH_ID = OI.DISH_ID
LEFT JOIN CUSTOMER_ORDER CO ON OI.ORDER_ID = CO.ORDER_ID
GROUP BY D.NAME
HAVING COUNT(DISTINCT CO.CUSTOMER_ID) >= 2
ORDER BY ORDER_COUNT ASC)
WHERE ROWNUM = 1;

SELECT * FROM (SELECT R.NAME, COUNT(D.DISH_ID) AS DISH_COUNT
FROM RESTAURANT R 
JOIN DISH D ON R.RESTAURANT_ID = D.DISH_ID
GROUP BY R.NAME
ORDER BY DISH_COUNT DESC)
WHERE ROWNUM = 1;

SELECT * FROM (SELECT C.FIRST_NAME || ' ' || C.LAST_NAME AS FULL_NAME, SUM(OI.QUANTITY * D.PRICE) AS TOTAL_SPENT
FROM CUSTOMER C 
JOIN CUSTOMER_ORDER CO ON C.CUSTOMER_ID = CO.CUSTOMER_ID
LEFT JOIN ORDER_ITEM OI ON CO.ORDER_ID = OI.ORDER_ID
JOIN DISH D ON OI.DISH_ID = D.DISH_ID
GROUP BY C.FIRST_NAME, C.LAST_NAME
ORDER BY TOTAL_SPENT DESC)
WHERE ROWNUM = 1;

ALTER TABLE ORDER_ITEM ADD STATUS VARCHAR2(10);

-- Calculate the average dish price
SELECT AVG(PRICE) INTO avg_price FROM DISH;

-- Update the STATUS of each dish
UPDATE DISH
SET STATUS = 
    CASE
        WHEN PRICE > (avg_price + 5) THEN 'Expensive'
        WHEN PRICE < (avg_price - 5) THEN 'Cheap'
        ELSE 'Average'
    END;
